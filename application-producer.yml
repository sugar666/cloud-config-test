spring:
  application:
    name: cloud-producer
  http:
    multipart:
      # control J
      enabled: true
      max-file-size: 100MB  # 传输文件的大小限制： 默认是1MB
      max-request-size: 100MB  # 最大的传输限制，默认是20MB，这个值不能小于上面的file-size

#  servlet:
#    multipart:
#      # control J
#      max-file-size: 100MB  # 传输文件的大小限制： 默认是1MB
#      max-request-size: 100MB  # 最大的传输限制，默认是20MB，这个值不能小于上面的file-size
#      enabled: true
server:
  port: 9909
#  servlet:
#    context-path: /product
eureka:
  client:
    service-url:
      #defaultZone 这个是不会提示的，此处需要自己写
      #实际上属性应该是service-url,这个属性是个map（key-value）格式；当key是defaultZone的时候才能被解析；所以这里没有提示，
      #但是自己还需要写一个defaultZone；
      defaultZone: http://yangshu:123@localhost:8761/eureka/
      # defaultZone: http://localhost:8762/eureka/,http://localhost:8763/eureka/,http://localhost:8764/eureka/

    # 从 eureka 服务器注册表中获取注册信息的时间间隔（S），默认为 30 秒
    registry-fetch-interval-seconds: 30

    # 复制实例变化信息到 eureka 服务器所需要的时间间隔（S），默认为 30 秒
    instance-info-replication-interval-seconds: 30

    # 询同 Eureka 服务 ur1 信息变化的时间间隔（S），默认为 300 秒（5 分钟)
    eureka-service-url-poll-interval-seconds: 300

    # 最初复制实例信息到 eureka 服务器所需的时间（s），默认为 40 秒
    initial-instance-info-replication-interval-seconds: 40

    # eureka 注册表的内容是否被压缩，默认为 true，并且是在最好的网络流量下被压缩
    g-zip-content: true

    # eureka 需要超时 读取 之前需要等待的时间，默认为 8 秒
    eureka-server-read-timeout-seconds: 8

    # eureka 需要超时 连接 之前需要等待的时间，默认为 5 秒
    eureka-server-connect-timeout-seconds: 5

    # eureka 客户端允许所有 eureka 服务器连接的总数目，默认是 200
    eureka-server-total-connections: 200

    # eureka 客户端允许 eureka 服务器主机连接的总数目，默认是 50
    eureka-server-total-connections-per-host: 50

    # 心跳执行程序线程池的大小，默认为 5
    heartbeat-executor-thread-pool-size: 5

    # 心跳执行程序回退相关的属性，是重试延退的最大倍数值，默认为 10
    heartbeat-executor-exponential-back-off-bound: 10

    # 执行程序緩存刷新线程池的大小，默认为 5
    cache-refresh-executor-thread-pool-size: 5

    #执行程序指数回退刷新的相关属性，是重试延迟的最大倍数值，默认为 10
    cache-refresh-executor-exponential-back-off-bound: 10


  instance:
    prefer-ip-address: true   # 会显示ip，不会以sell.com的形式进行显示
    # app-group-name: producer-group  # 服务的组名
    # appname: producer   # 服务的名称，设置后会覆盖上面的 cloud-producer, 不会影响restTemplate的使用，还是使用cloud-producer进行不同服务之间的调用
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port} # 最常用的显示ip的方法

    # 元数据
    metadata-map:
      myname: yangshu
      yangshu: aaas
      test: asdsd
debug: false